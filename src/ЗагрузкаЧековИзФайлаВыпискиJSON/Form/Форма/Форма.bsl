#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	лОписаниеОМ = Новый Массив;
	лОписаниеОМ.Добавить("Справочник.Контакты");
	лОписаниеОМ.Добавить("Справочник.СтатьиРасходов");
	лСоответствиеОМ = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(лОписаниеОМ);
	
	ИдентификаторОбъектаКонтакт = лСоответствиеОМ.Получить("Справочник.Контакты");
	ИдентификаторОбъектаСтатьяРасхода = лСоответствиеОМ.Получить("Справочник.СтатьиРасходов");
	
	Кошелек = ПользовательскиеНастройкиДеньгиСервер.ОсновнойКошелек();
	
	ПроверятьВерсиюКонфигурации = Истина;
	
	//*
	Элементы.ПроверятьВерсиюКонфигурации.Видимость = Ложь;
	ПроверятьВерсиюКонфигурации = Ложь;
	//*
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПримененныеНастройки = Новый Структура;
	ПримененныеНастройки.Вставить("ВариантРасчетаСуммыПозицииЧека");
	ПримененныеНастройки.Вставить("ПодбиратьСтатьиРасходаПоКлючевымСловам");
	ПримененныеНастройки.Вставить("ПроверятьВерсиюКонфигурации");
	ЗаполнитьЗначенияСвойств(ПримененныеНастройки, ЭтотОбъект);
	
	Элементы.ФормаПоказатьДанныеЧека.Пометка = ПоказыватьДанныеЧека;
	Элементы.ГруппаДанныеЧека.Видимость = Элементы.ФормаПоказатьДанныеЧека.Пометка;
	
	Элементы.СоставЧекаНазначитьКлючевыеСлова.Видимость = ПодбиратьСтатьиРасходаПоКлючевымСловам;
	
	Если НЕ НастройкиУстановлены Тогда
		ОткрытьНастройки(Неопределено);
		Элементы.ОтменитьНастройки.Видимость = Ложь;
	КонецЕсли;
	
	Если ПроверятьВерсиюКонфигурации Тогда
		лОжидаемаяВерсия = "2.0.35.38";
		лТекущаяВерсия = ВерсияКонфигурации();
		Если НЕ лТекущаяВерсия = лОжидаемаяВерсия Тогда
			лПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
			лПараметры.Заголовок = НСтр("ru = 'Текущая версия конфигурации не соответствует ожидаемой'");
			лПараметры.БлокироватьВесьИнтерфейс = Истина;
			лПараметры.Картинка = БиблиотекаКартинок.Предупреждение32;
			лПараметры.Вставить("ТекстФлажка", НСтр("ru = 'Больше не напоминать'"));
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
				Новый ОписаниеОповещения("ПроверкаВерсииКонфигурацииЗавершение", ЭтотОбъект),
				СтрШаблон(НСтр("ru = 'Обработка разрабатывалась для версии конфигурации %1. Использование на текущей версии (%2) требует повышенного внимания!'"), лОжидаемаяВерсия, лТекущаяВерсия),
				РежимДиалогаВопрос.ОК,
				лПараметры
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" И Параметр.ВидДокумента = "Расход" Тогда
		лПроведен = ЗначениеРеквизитаОбъекта(Параметр.Ссылка, "Проведен");
		лОтбор = Новый Структура("ДокументРасхода", Параметр.Ссылка);
		лНайденныеСтроки = Объект.СписокЧеков.НайтиСтроки(лОтбор);
		Для Каждого стр Из лНайденныеСтроки Цикл
			стр.ДокументРасходаПроведен = лПроведен;
			стр.СтатусДокументаРасхода 	= ?(стр.ДокументРасходаПроведен, 1, 0);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СтандартныйПериод") Тогда
		СтандартнаяОбработка = Ложь;
		Период = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЧеков

&НаКлиенте
Процедура СписокЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	лТД = Элементы.СписокЧеков.ТекущиеДанные;
	Если лТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СписокЧековДокументРасхода" Тогда
		ПоказатьЗначение(, лТД.ДокументРасхода);
	Иначе
		ПерейтиНаСтраницуСоставаЧека();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставЧека

&НаКлиенте
Процедура СоставЧекаПриИзменении(Элемент)
	
	СуммаСтрок = Объект.СоставЧека.Итог("Сумма");
	ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(
		СуммаСтрок,
		СуммаЧека,
		Элементы.ИнформацияСуммаЧека.Подсказка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЧекаКоличествоПриИзменении(Элемент)
	лТД = Элементы.СоставЧека.ТекущиеДанные;
	лТД.Сумма = лТД.Количество * лТД.Цена;
КонецПроцедуры

&НаКлиенте
Процедура СоставЧекаЦенаПриИзменении(Элемент)
	лТД = Элементы.СоставЧека.ТекущиеДанные;
	лТД.Сумма = лТД.Количество * лТД.Цена;
КонецПроцедуры

&НаКлиенте
Процедура СоставЧекаСуммаПриИзменении(Элемент)
	лТД = Элементы.СоставЧека.ТекущиеДанные;
	Если лТД.Количество = 0 Тогда
		лТД.Цена = лТД.Сумма;
	Иначе
		лТД.Цена = лТД.Сумма / лТД.Количество;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
	Элементы.ФормаОткрытьНастройки.Видимость 	= Ложь;
	Элементы.ФормаПоказатьВыпискуJSON.Видимость = Ложь;
	Элементы.ФормаПоказатьДанныеЧека.Видимость 	= Ложь;
	
	Если ПоказыватьДанныеЧека Тогда
		ПоказатьДанныеЧека(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	
	лОтказ = Ложь;
	
	Если НЕ НастройкиУстановлены Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для продолжения необходимо согласиться с условиями использования'"),, "НастройкиУстановлены",, лОтказ);
	КонецЕсли;
	
	Если лОтказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СоставЧекаНазначитьКлючевыеСлова.Видимость = ПодбиратьСтатьиРасходаПоКлючевымСловам;
	
	ЗаполнитьЗначенияСвойств(ПримененныеНастройки, ЭтотОбъект);
	ПерейтиНаСтраницуСпискаЧеков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНастройки(Команда)
	
	Если НЕ НастройкиУстановлены Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для продолжения необходимо согласиться с условиями использования'"),, "НастройкиУстановлены");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПримененныеНастройки);
	ПерейтиНаСтраницуСпискаЧеков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыпискуJSON(Команда)
	
	Если НЕ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыпискаJSON Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыпискаJSON;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеЧекаВФайл(Команда)
	
	лТД = Элементы.СписокЧеков.ТекущиеДанные;
	Если лТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	лИмяФайла = СтрШаблон(
		НСтр("ru = '%1_%2_%3_%4_%5'"),
		Формат(лТД.Дата, "ДФ=yyyy-MM-dd"),
		Формат(лТД.СуммаЧека, "ЧРД=-; ЧН=0; ЧГ=0"),
		лТД.ФН,
		лТД.ФД,
		лТД.ФПД
	);
	
	СохранитьJSONВФайл(лТД.ТелоЧека, лИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	лПараметры = Новый Структура("Период, ЗакрыватьПриВыборе, ОповеститьОВыборе", Период, Истина, Истина);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВыборСтандартногоПериода",
		лПараметры,
		Элементы.ПериодДатаНачала,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокЧеков(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	лДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	лДиалогВыбораФайла.Заголовок 	= НСтр("ru = 'Выбор файла'");
	лДиалогВыбораФайла.Фильтр 		= НСтр("ru = 'Файлы json(*.json)|*.json'");
	лДиалогВыбораФайла.МножественныйВыбор = Ложь;
	лДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	лКаталог = Новый Файл(ПутьККаталогу);
	Если лКаталог.Существует() И лКаталог.ЭтоКаталог() Тогда
		лДиалогВыбораФайла.Каталог = ПутьККаталогу;
	КонецЕсли;
	
	лОповещение = Новый ОписаниеОповещения("ЗагрузитьСписокЧековЗавершение", ЭтотОбъект);
	лДиалогВыбораФайла.Показать(лОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокЧековЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	лВыбранныйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныеФайлы[0]);
	ПутьККаталогу = лВыбранныйФайл.Путь;
	
	лФайлСДанными = Новый ТекстовыйДокумент;
	лФайлСДанными.Прочитать(лВыбранныйФайл.ПолноеИмя, "UTF-8");
	лСодержимоеФайла = лФайлСДанными.ПолучитьТекст();
	
	//лНачалоОперации = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ЗагрузитьСписокЧековНаСервере(лСодержимоеФайла);
	
	//лДлительностьОперации = ОбщегоНазначенияКлиент.ДатаСеанса() - лНачалоОперации;
	//лПредставлениеВремени = НапоминанияПользователяКлиент.ПредставлениеВремени(лДлительностьОперации);
	//лТекстСообщения = СтрШаблон("Длительность операции: %1", лПредставлениеВремени);
	//ОбщегоНазначенияКлиент.СообщитьПользователю(лТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокЧековНаСервере(Знач пСодержимоеФайла)
	
	Если Ложь Тогда
		
		ВыпискаJSON = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ТестовыйСписокЧеков").ПолучитьТекст();
		лСписокЧеков = ОбъектИзСтрокиJSON(ВыпискаJSON);
		
	Иначе
		
		Попытка
			лСписокЧеков = ОбъектИзСтрокиJSON(пСодержимоеФайла);
		Исключение
		    лПредставлениеОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось прочитать в структуру данных выписку JSON:%1%2'"),
				Символы.ПС,
				пСодержимоеФайла
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лПредставлениеОшибки);
			Возврат;
		КонецПопытки;
		
		ВыпискаJSON = ОбъектВСтрокуJSON(лСписокЧеков);
		
	КонецЕсли;
	
	Объект.СписокЧеков.Очистить();
	Для Каждого лЧек Из лСписокЧеков Цикл
		
		лТелоЧека = лЧек.ticket.document.receipt;
		
		лДата = лТелоЧека.dateTime;
		Если лДата < Период.ДатаНачала ИЛИ ЗначениеЗаполнено(НачалоДня(Период.ДатаОкончания)) И лДата > Период.ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
		
		лИНН = СокрЛП(лТелоЧека.userInn);
		Если ИсключаемыеИНН.НайтиПоЗначению(лИНН) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		лНовыйЧек = Объект.СписокЧеков.Добавить();
		лНовыйЧек.Дата 		= лДата;
		лНовыйЧек.СуммаЧека = лТелоЧека.totalSum / 100;
		лНовыйЧек.СуммаЧекаЦел = Цел(лНовыйЧек.СуммаЧека);
		лНовыйЧек.Наличные 	= ЗначениеЗаполнено(лТелоЧека.cashTotalSum);
		лНовыйЧек.ИНН 		= лИНН;
		Если лТелоЧека.Свойство("user") Тогда
			лНовыйЧек.Организация = СокрЛП(лТелоЧека.user);
		КонецЕсли;
		Если лТелоЧека.Свойство("retailPlaceAddress") Тогда
			лНовыйЧек.Адрес = СокрЛП(лТелоЧека.retailPlaceAddress);
		КонецЕсли;
		лНовыйЧек.ФН 		= СокрЛП(лТелоЧека.fiscalDriveNumber);
		лНовыйЧек.ФД 		= Формат(лТелоЧека.fiscalDocumentNumber, "ЧН=0; ЧГ=0");
		лНовыйЧек.ФПД 		= Формат(лТелоЧека.fiscalSign, "ЧН=0; ЧГ=0");
		лНовыйЧек.ТелоЧека 	= ОбъектВСтрокуJSON(лТелоЧека);
		лНовыйЧек.СтатусДокументаРасхода = 100500;
	
	КонецЦикла;
	
	Объект.СписокЧеков.Сортировать("Дата Убыв");
	
	ПодобратьДокументыРасхода();
	
	лОтбор = Новый Структура("ДокументРасхода", Документы.Расход.ПустаяСсылка());
	КоличествоДокументовРасхода = Объект.СписокЧеков.Количество() - Объект.СписокЧеков.НайтиСтроки(лОтбор).Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьЧек(Команда)
	ПерейтиНаСтраницуСоставаЧека();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДанныеЧека(Команда)
	
	Элементы.ФормаПоказатьДанныеЧека.Пометка = НЕ Элементы.ФормаПоказатьДанныеЧека.Пометка;
	Элементы.ГруппаДанныеЧека.Видимость = Элементы.ФормаПоказатьДанныеЧека.Пометка;
	ПоказыватьДанныеЧека = Элементы.ФормаПоказатьДанныеЧека.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуЧеков(Команда)
	ПерейтиНаСтраницуСпискаЧеков();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКлючевыеСлова(Команда)
	
	лТД = Элементы.СоставЧека.ТекущиеДанные;
	Если лТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(лТД.СтатьяРасхода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для назначения ключевых слов необходимо выбрать статью расхода'")
		);
		Возврат;
	КонецЕсли;
	
	лИмяФормы 	= ПолучитьПолноеИмяФормы(ИмяФормы, "ФормаКлючевыхСлов");
	лПараметры 	= Новый Структура("СтатьяРасхода, КомментарийСтроки", лТД.СтатьяРасхода, лТД.КомментарийСтроки);
	
	ОткрытьФорму(
		лИмяФормы,
		лПараметры,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СуммаСтрок = Объект.СоставЧека.Итог("Сумма");
	
	Если НЕ СуммаЧека = СуммаСтрок Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОтветНаВопросОРазницеВСуммах", ЭтотОбъект),
			НСтр("ru = 'Итоговая сумма чека отличается от суммы в строках. Все равно перенести данные в документ?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет
		);
		Возврат;
	КонецЕсли;
	
	ПеренестиВДокументПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОРазницеВСуммах(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	ПеренестиВДокументПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументПродолжение()

	ПеренестиВДокументНаСервере();
	
	лТД = Элементы.СписокЧеков.ТекущиеДанные;
	Если НЕ лТД = Неопределено Тогда
		лПроведен = ЗначениеРеквизитаОбъекта(ДокументРасхода, "Проведен");
		лТД.ДокументРасхода = ДокументРасхода;
		лТД.ДокументРасходаПроведен = лПроведен;
		лТД.СтатусДокументаРасхода 	= ?(лТД.ДокументРасходаПроведен, 1, 0);
	КонецЕсли;
	
	ПерейтиНаСтраницуСпискаЧеков();
	ПоказатьЗначение(, ДокументРасхода);

КонецПроцедуры

// Частично заимствовано у Астахов П.В <astakhovp@gmail.com>
//
&НаСервере
Процедура ПеренестиВДокументНаСервере()

	Если ЗначениеЗаполнено(ДокументРасхода) Тогда
		лДокументОбъект = ДокументРасхода.ПолучитьОбъект();
	Иначе
		лДокументОбъект = Документы.Расход.СоздатьДокумент();
		лДокументОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	лДокументОбъект.Дата = СтруктураТекущихДанных.Дата;
	лДокументОбъект.СуммаЧека = СуммаЧека;
	Если ЗначениеЗаполнено(Кошелек) Тогда
		лДокументОбъект.КошелекДолг = Кошелек;
	КонецЕсли;
	лДокументОбъект.Комментарий = Комментарий;
	
	// Сформируем таблицу аналитики
	лТЗАналитики = АналитикаСтатей.НоваяТаблицаВидИЗначениеАналитики();
	лТЗАналитики.Колонки.Добавить("РедактироватьВШапке", Новый ОписаниеТипов("Булево"));// Добавим поле для определения, что можно менять
	// Получим набор аналитики по Объекту
	НаборАналитики = ПолучитьАктуальныйНаборАналитики(лДокументОбъект);
	// Выберем только аналитику используемую в Расходе
	МасСтр = НаборАналитики.НайтиСтроки(Новый Структура ("ИспользоватьДляРасхода", Истина));
	// Заполним таблицу аналитики, так получим значения по-умолчанию, которые заполняются в шапке
	Для Каждого СтрНабораАналитики Из МасСтр Цикл
		Если лТЗАналитики.Найти(СтрНабораАналитики.ВидАналитики, "ВидАналитики") = Неопределено Тогда// Хотя вроде бы лишнее условие
			СтрАналитики = лТЗАналитики.Добавить();
			ЗаполнитьЗначенияСвойств(СтрАналитики, СтрНабораАналитики);
			СтрАналитики.ЗначениеАналитики = СтрНабораАналитики.ЗначениеАналитикиРасходаПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение аналитики Магазина
	Если ЗначениеЗаполнено(Организация) Тогда
		// Прямой поиск...
		АналитикаМагазин = лТЗАналитики.Найти(ПланыВидовХарактеристик.ВидыАналитик.МестоТраты, "ВидАналитики");
		Если АналитикаМагазин = Неопределено Тогда// Получается, что аналитика не используется, но мы добавим
			АналитикаМагазин = лТЗАналитики.Добавить();
			АналитикаМагазин.ВидАналитики = ПланыВидовХарактеристик.ВидыАналитик.МестоТраты;
		КонецЕсли;
		АналитикаМагазин.ЗначениеАналитики = Организация;
		АналитикаМагазин.РедактироватьВШапке = Истина;// На всякий случай поставим, что редактируется в шапке
	КонецЕсли;
	
	лТЗ = Объект.СоставЧека.Выгрузить();
	лТЗ.Свернуть("СтатьяРасхода, КомментарийСтроки", "Количество, Сумма");
	
	лДокументОбъект.Расходы.Очистить();
	Для Каждого Строка Из лТЗ Цикл
		НоваяСтрока = лДокументОбъект.Расходы.Добавить();
		НоваяСтрока.СтатьяРасходаИмущество = Строка.СтатьяРасхода;
		Если Строка.СтатьяРасхода.КоличественныйУчет Тогда
			НоваяСтрока.Количество = Строка.Количество;
		КонецЕсли;
		НоваяСтрока.Сумма = Строка.Сумма;
		НоваяСтрока.КомментарийСтроки = СокрЛП(Строка.КомментарийСтроки);
		РасширеннаяАналитика = АналитикаСтатей.ПолучитьРасширеннуюАналитикуДляСтатьи(Строка.СтатьяРасхода);
		Для Каждого СтрРасшАналитики Из РасширеннаяАналитика Цикл
			Если Не СтрРасшАналитики.Использовать Тогда Продолжить; КонецЕсли;// Есть такое поле будем проверять.
			СтрАналитики = лТЗАналитики.Найти(СтрРасшАналитики.ВидАналитики, "ВидАналитики");
			Если СтрАналитики = Неопределено Тогда// Вопрос - добавлять или нет. Пока не буду.
				Продолжить;
			ИначеЕсли СтрАналитики.РедактироватьВШапке Тогда// Редактируемые в шапке тоже пропускаем.
				Продолжить;
			КонецЕсли;
			//Ну а здесь заполним аналитику
			СтрАналитики.ЗначениеАналитики = СтрРасшАналитики.ЗначениеПоУмолчанию;
		КонецЦикла;
		//Преобразуем таблицу в ссылку
		//*
		лВидИЗначениеАналитики = АналитикаСтатей.НоваяТаблицаВидИЗначениеАналитики();
		Для Каждого стр Из лТЗАналитики Цикл
			Если ЗначениеЗаполнено(стр.ЗначениеАналитики) Тогда
				ЗаполнитьЗначенияСвойств(лВидИЗначениеАналитики.Добавить(), стр);
			КонецЕсли;
		КонецЦикла;
		//*
		НоваяСтрока.АналитикаСтатьи = АналитикаСтатей.ПолучитьСсылкуНаНаборЗначенийАналитик(лВидИЗначениеАналитики);
	КонецЦикла;
	
	// Сохраним аналитику в документ
	лДокументОбъект.АналитикаДокумента.Очистить();
	Для Каждого СтрАналитика Из лТЗАналитики Цикл
		СтрАналитикиДок = лДокументОбъект.АналитикаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрАналитикиДок, СтрАналитика);
		Если СтрАналитикиДок.РедактироватьВШапке Тогда
			СтрАналитикиДок.ЗначениеАналитикиВШапке = СтрАналитика.ЗначениеАналитики;
		КонецЕсли;
	КонецЦикла;
	
	лЭтоНовый = лДокументОбъект.ЭтоНовый();
	
	лДокументОбъект.Записать();
	
	ДокументРасхода = лДокументОбъект.Ссылка;
	
	Если лЭтоНовый Тогда
		КоличествоДокументовРасхода = КоличествоДокументовРасхода + 1;
	КонецЕсли;
	
	НазначитьИННОрганизации();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверкаВерсииКонфигурацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПроверятьВерсиюКонфигурации = НЕ РезультатВопроса.БольшеНеЗадаватьЭтотВопрос;
	ПримененныеНастройки.ПроверятьВерсиюКонфигурации = ПроверятьВерсиюКонфигурации;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияКонфигурации()
	Возврат Метаданные.Версия;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектВСтрокуJSON(Знач ОбъектЗаписи)

	лЗапись = Новый ЗаписьJSON;
	лЗапись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(лЗапись, ОбъектЗаписи);
	
	Возврат лЗапись.Закрыть();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектИзСтрокиJSON(Знач СтрокаJSON)

	лЧтение = Новый ЧтениеJSON;
	лЧтение.УстановитьСтроку(СтрокаJSON);
	
	Возврат ПрочитатьJSON(лЧтение, , "dateTime");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПолноеИмяФормы(Знач ИмяТекущейФормы, Знач ИмяИскомойФормы) 
    Возврат Лев(ИмяТекущейФормы, СтрНайти(ИмяТекущейФормы, ".", НаправлениеПоиска.СКонца)) + ИмяИскомойФормы;
КонецФункции

&НаКлиенте
Процедура СохранитьJSONВФайл(Знач СтрокаJSON, Знач ИмяФайла)
	
	лДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	лДиалогВыбораФайла.Фильтр = НСтр("ru = 'JSON file (*.json)|*.json'");;
	лДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
	
	лДополнительныеПараметры = Новый Структура("СтрокаJSON", СтрокаJSON);
	лОповещение = Новый ОписаниеОповещения("СохранитьJSONВФайлЗавершение", ЭтотОбъект, лДополнительныеПараметры);
	лДиалогВыбораФайла.Показать(лОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьJSONВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Строка") Тогда
		лПутьКФайлу = ВыбранныеФайлы;
	ИначеЕсли ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		лПутьКФайлу = ВыбранныеФайлы[0];
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка в имени файла'"));
		Возврат;
	КонецЕсли;
	
	лЗапись = Новый ЗаписьJSON;
	лЗапись.ОткрытьФайл(лПутьКФайлу);
	лЗапись.ЗаписатьБезОбработки(ДополнительныеПараметры.СтрокаJSON);
	лЗапись.Закрыть();

КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументыРасхода()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокЧеков.Дата КАК Дата,
	|	СписокЧеков.СуммаЧека КАК СуммаЧека,
	|	СписокЧеков.ФН КАК ФН,
	|	СписокЧеков.ФД КАК ФД,
	|	СписокЧеков.ФПД КАК ФПД
	|ПОМЕСТИТЬ втСписокЧеков
	|ИЗ
	|	&СписокЧеков КАК СписокЧеков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСписокЧеков.Дата КАК Дата,
	|	втСписокЧеков.СуммаЧека КАК СуммаЧека,
	|	втСписокЧеков.ФН КАК ФН,
	|	втСписокЧеков.ФД КАК ФД,
	|	втСписокЧеков.ФПД КАК ФПД,
	|	Расход.Ссылка КАК ДокументРасхода,
	|	Расход.Проведен КАК ДокументРасходаПроведен,
	|	ВЫБОР
	|		КОГДА Расход.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусДокументаРасхода
	|ИЗ
	|	втСписокЧеков КАК втСписокЧеков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Расход КАК Расход
	|		ПО (втСписокЧеков.Дата = НАЧАЛОПЕРИОДА(Расход.Дата, МИНУТА))
	|			И втСписокЧеков.СуммаЧека = Расход.СуммаОплаты
	|			И (НЕ Расход.ПометкаУдаления)";
	Запрос.УстановитьПараметр("СписокЧеков", Объект.СписокЧеков.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	лОтбор = Новый Структура("Дата, СуммаЧека, ФН, ФД, ФПД");
	лТаблицаДляУточнения = Объект.СписокЧеков.Выгрузить(Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(лОтбор, Выборка);
		лНайденныеСтроки = Объект.СписокЧеков.НайтиСтроки(лОтбор);
		Для Каждого стр Из лНайденныеСтроки Цикл
			Если ЗначениеЗаполнено(стр.ДокументРасхода) Тогда
				ЗаполнитьЗначенияСвойств(лТаблицаДляУточнения.Добавить(), стр);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(стр, Выборка, "ДокументРасхода, ДокументРасходаПроведен, СтатусДокументаРасхода");
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокЧеков.Дата КАК Дата,
	|	СписокЧеков.СуммаЧека КАК СуммаЧека,
	|	СписокЧеков.СуммаЧекаЦел КАК СуммаЧекаЦел,
	|	СписокЧеков.ФН КАК ФН,
	|	СписокЧеков.ФД КАК ФД,
	|	СписокЧеков.ФПД КАК ФПД,
	|	НАЧАЛОПЕРИОДА(СписокЧеков.Дата, ДЕНЬ) КАК День
	|ПОМЕСТИТЬ втСписокЧеков
	|ИЗ
	|	&СписокЧеков КАК СписокЧеков
	|ГДЕ
	|	СписокЧеков.ДокументРасхода = ЗНАЧЕНИЕ(Документ.Расход.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСписокЧеков.Дата КАК Дата,
	|	втСписокЧеков.СуммаЧека КАК СуммаЧека,
	|	втСписокЧеков.ФН КАК ФН,
	|	втСписокЧеков.ФД КАК ФД,
	|	втСписокЧеков.ФПД КАК ФПД,
	|	Расход.Ссылка КАК ДокументРасхода,
	|	Расход.Проведен КАК ДокументРасходаПроведен,
	|	ВЫБОР
	|		КОГДА Расход.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусДокументаРасхода
	|ИЗ
	|	втСписокЧеков КАК втСписокЧеков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Расход КАК Расход
	|		ПО (втСписокЧеков.День = НАЧАЛОПЕРИОДА(Расход.Дата, ДЕНЬ))
	|			И (Расход.СуммаОплаты - втСписокЧеков.СуммаЧекаЦел МЕЖДУ 0 И 1)
	|			И (НЕ Расход.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Расход.СуммаОплаты УБЫВ";
	Запрос.УстановитьПараметр("СписокЧеков", Объект.СписокЧеков.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(лОтбор, Выборка);
		лНайденныеСтроки = Объект.СписокЧеков.НайтиСтроки(лОтбор);
		Для Каждого стр Из лНайденныеСтроки Цикл
			Если ЗначениеЗаполнено(стр.ДокументРасхода) Тогда
				ЗаполнитьЗначенияСвойств(лТаблицаДляУточнения.Добавить(), стр);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(стр, Выборка, "ДокументРасхода, ДокументРасходаПроведен, СтатусДокументаРасхода");
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого стр1 Из лТаблицаДляУточнения Цикл
		ЗаполнитьЗначенияСвойств(лОтбор, стр1);
		лНайденныеСтроки = Объект.СписокЧеков.НайтиСтроки(лОтбор);
		Для Каждого стр2 Из лНайденныеСтроки Цикл
			стр2.НесколькоДокументовРасхода = Истина;
			стр2.СтатусДокументаРасхода 	= 100500;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуСоставаЧека()

	лТД = Элементы.СписокЧеков.ТекущиеДанные;
	Если лТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТекущихДанных = Новый Структура("Дата, ИНН, ТелоЧека");
	ЗаполнитьЗначенияСвойств(СтруктураТекущихДанных, лТД);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, лТД, "СуммаЧека, ДокументРасхода");
	
	Комментарий = СтрШаблон("Заполнено по штрихкоду fn=%1 fp=%2 i=%3",
		лТД.ФН,
		лТД.ФПД,
		лТД.ФД
	);
	
	//лНачалоОперации = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ЗаполнитьСоставЧекаНаСервере();
	
	//лДлительностьОперации = ОбщегоНазначенияКлиент.ДатаСеанса() - лНачалоОперации;
	//лПредставлениеВремени = НапоминанияПользователяКлиент.ПредставлениеВремени(лДлительностьОперации);
	//лТекстСообщения = СтрШаблон("Длительность операции: %1", лПредставлениеВремени);
	//ОбщегоНазначенияКлиент.СообщитьПользователю(лТекстСообщения);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСоставЧека;
	Элементы.ПеренестиВДокумент.КнопкаПоУмолчанию = Истина;
	Элементы.Организация.ПодсказкаВвода = лТД.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставЧекаНаСервере()

	Организация = ПолучитьОрганизацию(СтруктураТекущихДанных.ИНН, ИдентификаторОбъектаКонтакт);
	
	лСоставЧека = ОбъектИзСтрокиJSON(СтруктураТекущихДанных.ТелоЧека).items;
	
	Объект.СоставЧека.Очистить();
	Для Каждого лПозиция Из лСоставЧека Цикл
		лНоваяСтрока = Объект.СоставЧека.Добавить();
		лНоваяСтрока.Количество = лПозиция.quantity;
		лНоваяСтрока.Цена 		= лПозиция.price / 100;
		Если ВариантРасчетаСуммыПозицииЧека = 1 Тогда
			лНоваяСтрока.Сумма 	= лПозиция.sum / 100;
		Иначе
			лНоваяСтрока.Сумма 	= лНоваяСтрока.Количество * лНоваяСтрока.Цена;
		КонецЕсли;
		Если лПозиция.Свойство("name") Тогда
			лНоваяСтрока.КомментарийСтроки = СокрЛП(лПозиция.name);
		КонецЕсли;
	КонецЦикла;
	
	СуммаСтрок = Объект.СоставЧека.Итог("Сумма");
	ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(
		СуммаСтрок,
		СуммаЧека,
		Элементы.ИнформацияСуммаЧека.Подсказка
	);
	
	ПодобратьСтатьиРасхода();

КонецПроцедуры

&НаСервере
Процедура ПодобратьСтатьиРасхода()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставЧека.КомментарийСтроки КАК КомментарийСтроки,
	|	ВЫРАЗИТЬ(СоставЧека.КомментарийСтроки КАК СТРОКА(250)) КАК КомментарийСтроки250
	|ПОМЕСТИТЬ втСоставЧека
	|ИЗ
	|	&СоставЧека КАК СоставЧека
	|ГДЕ
	|	НЕ СоставЧека.КомментарийСтроки = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставЧека.КомментарийСтроки КАК КомментарийСтроки,
	|	втСоставЧека.КомментарийСтроки250 КАК КомментарийСтроки250,
	|	МАКСИМУМ(ФОБ.Период) КАК Период
	|ПОМЕСТИТЬ втПоследниеРасходы
	|ИЗ
	|	втСоставЧека КАК втСоставЧека
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОборотыБюджета КАК ФОБ
	|		ПО втСоставЧека.КомментарийСтроки250 = ФОБ.Комментарий
	|			И (ФОБ.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание))
	|ГДЕ
	|	ФОБ.СтатьяБюджета ССЫЛКА Справочник.СтатьиРасходов
	|	И ФОБ.Регистратор ССЫЛКА Документ.Расход
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоставЧека.КомментарийСтроки,
	|	втСоставЧека.КомментарийСтроки250
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПоследниеРасходы.Период КАК Период,
	|	втПоследниеРасходы.КомментарийСтроки КАК КомментарийСтроки,
	|	ФОБ.СтатьяБюджета КАК СтатьяРасхода
	|ИЗ
	|	втПоследниеРасходы КАК втПоследниеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОборотыБюджета КАК ФОБ
	|		ПО втПоследниеРасходы.КомментарийСтроки250 = ФОБ.Комментарий
	|			И (ФОБ.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание))
	|			И втПоследниеРасходы.Период = ФОБ.Период
	|ГДЕ
	|	ФОБ.СтатьяБюджета ССЫЛКА Справочник.СтатьиРасходов
	|	И ФОБ.Регистратор ССЫЛКА Документ.Расход
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПоследниеРасходы.Период";
	Запрос.УстановитьПараметр("СоставЧека", Объект.СоставЧека.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	лОтбор = Новый Структура("КомментарийСтроки");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(лОтбор, Выборка);
		лНайденныеСтроки = Объект.СоставЧека.НайтиСтроки(лОтбор);
		Для Каждого стр Из лНайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(стр, Выборка, "СтатьяРасхода");
		КонецЦикла;
	КонецЦикла;
	
	Если ПодбиратьСтатьиРасходаПоКлючевымСловам Тогда
		ПодобратьСтатьиРасходаПоКлючевымСловам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьСтатьиРасходаПоКлючевымСловам()

	лОтбор = Новый Структура("СтатьяРасхода", Справочники.СтатьиРасходов.ПустаяСсылка());
	лПустыеСтроки = Объект.СоставЧека.НайтиСтроки(лОтбор);
	
	Если НЕ ЗначениеЗаполнено(лПустыеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	лИскатьПустыеСтроки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеСловаОбъектов.КлючевоеСлово КАК КлючевоеСлово,
		|	КлючевыеСловаОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.КлючевыеСловаОбъектов КАК КлючевыеСловаОбъектов
		|ГДЕ
		|	КлючевыеСловаОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючевыеСловаОбъектов.КлючевоеСлово ПОДОБНО ""% %"" УБЫВ";
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъектаСтатьяРасхода);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если лИскатьПустыеСтроки Тогда
			лПустыеСтроки = Объект.СоставЧека.НайтиСтроки(лОтбор);
			Если НЕ ЗначениеЗаполнено(лПустыеСтроки) Тогда
				Прервать;
			КонецЕсли;
			лИскатьПустыеСтроки = Ложь;
		КонецЕсли;
		Для Каждого стр Из лПустыеСтроки Цикл
			лКомментарий = СокрЛП(стр.КомментарийСтроки);
			лКомментарий = НРег(лКомментарий);
			Если НЕ СтрНайти(лКомментарий, Выборка.КлючевоеСлово) = 0 Тогда
				стр.СтатьяРасхода = Выборка.Объект;
				лИскатьПустыеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуСпискаЧеков()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписокЧеков;
	Элементы.СписокЧековЗагрузитьСписокЧеков.КнопкаПоУмолчанию = Истина;
	
	Элементы.ФормаОткрытьНастройки.Видимость 	= Истина;
	Элементы.ФормаПоказатьВыпискуJSON.Видимость = Истина;
	Элементы.ФормаПоказатьДанныеЧека.Видимость 	= Истина;

КонецПроцедуры

&НаСервере
Процедура НазначитьИННОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(СтруктураТекущихДанных.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	лНаборЗаписей = РегистрыСведений.КлючевыеСловаОбъектов.СоздатьНаборЗаписей();
	лНаборЗаписей.Отбор.КлючевоеСлово.Установить(СтруктураТекущихДанных.ИНН);
	лНаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(ИдентификаторОбъектаКонтакт);
	
	лЗаписьРегистра = лНаборЗаписей.Добавить();
	лЗаписьРегистра.КлючевоеСлово           = СтруктураТекущихДанных.ИНН;
	лЗаписьРегистра.ИдентификаторОбъекта    = ИдентификаторОбъектаКонтакт;
	лЗаписьРегистра.Объект                  = Организация;
	
	лНаборЗаписей.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(Знач ИНН, Знач ИдентификаторОбъектаКонтакт)
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлючевыеСловаОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.КлючевыеСловаОбъектов КАК КлючевыеСловаОбъектов
		|ГДЕ
		|	КлючевыеСловаОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И КлючевыеСловаОбъектов.КлючевоеСлово = &КлючевоеСлово"
	);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъектаКонтакт);
	Запрос.УстановитьПараметр("КлючевоеСлово", ИНН);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Объект;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНадписьКонтроляЧека(Знач СуммаСтрок, Знач СуммаЧека, ТекстПодсказки)

	СтрокаРезультата = "";
	
	Если СуммаСтрок > СуммаЧека Тогда
		СтрокаРезультата =
			НСтр("ru = 'Суммы в строках больше, чем в чеке на %1'");
		СтрокаРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаРезультата, Формат(СуммаСтрок - СуммаЧека, "ЧДЦ=2"));
		ТекстПодсказки = НСтр("ru = 'Очевидно, в операции есть лишние строки или какая-то сумма больше указанной в чеке'");
	ИначеЕсли СуммаСтрок = СуммаЧека Тогда
		СтрокаРезультата = НСтр("ru = 'итог по чеку совпал с суммой строк'") ;
		ТекстПодсказки = НСтр("ru = 'Содержание чека полностью учтено в операции'");
	ИначеЕсли СуммаСтрок < СуммаЧека Тогда
		СтрокаРезультата =
			НСтр("ru = 'Сумма чека больше сумм в строках на %1'");
		СтрокаРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаРезультата, Формат(СуммаЧека - СуммаСтрок, "ЧДЦ=2"));
		ТекстПодсказки = НСтр("ru = 'Очевидно, в операции учтены не все строки из чека, или какая-то сумма меньше указанной в чеке'");
	КонецЕсли;
	
	Возврат СтрокаРезультата;

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

// Полностью заимствовано у Астахов П.В <astakhovp@gmail.com>
//
&НаСервереБезКонтекста
Функция ПолучитьАктуальныйНаборАналитики(ДокОбъект)
	ИспользоватьАналитикуВНовыхОперациях = ПолучитьФункциональнуюОпцию("ИспользоватьАналитикуСтатей");
	Если Не ИспользоватьАналитикуВНовыхОперациях Тогда Возврат Неопределено; КонецЕсли;
	//РеквизитыДокумента = АналитикаСтатей.ПолучитьТаблицуРеквизитовАналитикиДокумента(Документы.Расход.Метаданные(), "", "", "СтатьяРасходаИмущество", "АналитикаСтатьи");
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ИмяТабличнойЧасти",            Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизитаСтатьи",           Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизитаПакетаАналитики",  Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ЭтоДоход",                     Новый ОписаниеТипов("Булево"));
	ТаблицаРеквизитов.Колонки.Добавить("ЭтоРасход",                    Новый ОписаниеТипов("Булево"));
	
	СтрРеквизитов = ТаблицаРеквизитов.Добавить();
	СтрРеквизитов.ИмяТабличнойЧасти = "Расходы"; СтрРеквизитов.ИмяРеквизитаСтатьи = "СтатьяРасходаИмущество";
	СтрРеквизитов.ИмяРеквизитаПакетаАналитики = "АналитикаСтатьи"; СтрРеквизитов.ЭтоДоход = Ложь; СтрРеквизитов.ЭтоРасход = Истина;
	//АналитикаСтатей.ПолучитьАктуальныйНаборАналитики (, ТаблицаРеквизитов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьДляДоходов",  Ложь);
	Запрос.УстановитьПараметр("ИспользоватьДляРасходов", Истина);
	Запрос.УстановитьПараметр("ИмяВидаДокумента",  "Расход");
	
	// Собираем в таблицу все наборы значений аналитики, сохраненные в документе:
	ПакетыАналитики = Новый ТаблицаЗначений;
	ПакетыАналитики.Колонки.Добавить("ПакетАналитики",                Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоАналитика"));
	ПакетыАналитики.Колонки.Добавить("ИспользоватьДляДохода",         Новый ОписаниеТипов("Булево"));
	ПакетыАналитики.Колонки.Добавить("ИспользоватьДляРасхода",        Новый ОписаниеТипов("Булево"));
	ПакетыАналитики.Колонки.Добавить("РедактироватьВШапке",           Новый ОписаниеТипов("Булево"));
		//БСА. Если таблица Расходы заполнена и 
	Для каждого ТабличнаяЧасть Из ТаблицаРеквизитов Цикл
		// Значение реквизита табличной части
		Для каждого СтрокаТабЧасти Из ДокОбъект[ТабличнаяЧасть.ИмяТабличнойЧасти] Цикл
				//БСА. заполнен реквизит строки АналитикаСтатьи, то 
			Если ЗначениеЗаполнено(СтрокаТабЧасти[ТабличнаяЧасть.ИмяРеквизитаПакетаАналитики]) Тогда
				СтрокаАналитики = ПакетыАналитики.Добавить();		//БСА. Добавляем аналитику в Пакет
				СтрокаАналитики.ПакетАналитики = СтрокаТабЧасти[ТабличнаяЧасть.ИмяРеквизитаПакетаАналитики];
				СтрокаАналитики.ИспользоватьДляДохода   = ТабличнаяЧасть.ЭтоДоход;
				СтрокаАналитики.ИспользоватьДляРасхода  = ТабличнаяЧасть.ЭтоРасход;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	ПакетыАналитики.Свернуть("ПакетАналитики", "ИспользоватьДляДохода, ИспользоватьДляРасхода, РедактироватьВШапке");
	Запрос.УстановитьПараметр("ПакетыАналитики", ПакетыАналитики);
	Запрос.УстановитьПараметр("ПрименятьНастройкиАналитики", ПакетыАналитики.Количество() = 0 И ДокОбъект.Ссылка.Пустая());
		//БСА. Общая аналитика документа, определяется наличием табличной части АналитикаДокумента
	ОбщаяАналитикаДокумента = ДокОбъект.АналитикаДокумента.Выгрузить();
		
		// Если отсутствуют реквизиты ИспользоватьДляДохода, ИспользоватьДляРасхода, значит в документе есть или только доход, или только расход.
	ОбщаяАналитикаДокумента.Колонки.Добавить("ИспользоватьДляДохода", Новый ОписаниеТипов("Булево"));
	ОбщаяАналитикаДокумента.ЗаполнитьЗначения(Ложь, "ИспользоватьДляДохода");
	ОбщаяАналитикаДокумента.Колонки.Добавить("ИспользоватьДляРасхода", Новый ОписаниеТипов("Булево"));
	ОбщаяАналитикаДокумента.ЗаполнитьЗначения(Истина, "ИспользоватьДляРасхода");
		
	Запрос.УстановитьПараметр("ОбщаяАналитикаДокумента", ОбщаяАналитикаДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщаяАналитикаДокумента.ВидАналитики,
	|	ОбщаяАналитикаДокумента.РедактироватьВШапке,
	|	ОбщаяАналитикаДокумента.ЗначениеАналитикиВШапке,
	|	ОбщаяАналитикаДокумента.ИспользоватьДляДохода,
	|	ОбщаяАналитикаДокумента.ИспользоватьДляРасхода
	|ПОМЕСТИТЬ ОбщаяАналитикаДокумента
	|ИЗ
	|	&ОбщаяАналитикаДокумента КАК ОбщаяАналитикаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетыАналитики.ПакетАналитики,
	|	ПакетыАналитики.ИспользоватьДляДохода,
	|	ПакетыАналитики.ИспользоватьДляРасхода,
	|	ПакетыАналитики.РедактироватьВШапке
	|ПОМЕСТИТЬ ПакетыАналитикиДокумента
	|ИЗ
	|	&ПакетыАналитики КАК ПакетыАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальнаяАналитика.ВидАналитики,
	|	АктуальнаяАналитика.ВидАналитики.ТипЗначения КАК ТипЗначенияАналитики,
	|	АктуальнаяАналитика.ВидАналитики.Наименование КАК НаименованиеАналитики,
	|	АктуальнаяАналитика.ИспользоватьДляДохода,
	|	АктуальнаяАналитика.ИспользоватьДляРасхода,
	|	АктуальнаяАналитика.РедактироватьВШапке,
	|	АктуальнаяАналитика.ВидАналитики.ЗначениеАналитикиДохода КАК ЗначениеАналитикиДоходаПоУмолчанию,
	|	АктуальнаяАналитика.ВидАналитики.ЗначениеАналитикиРасхода КАК ЗначениеАналитикиРасходаПоУмолчанию,
	|	АктуальнаяАналитика.ВидАналитики.РасширенныеНастройкиДляДохода КАК РасширенныеНастройкиДляДохода,
	|	АктуальнаяАналитика.ВидАналитики.РасширенныеНастройкиДляРасхода КАК РасширенныеНастройкиДляРасхода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сбор.ВидАналитики КАК ВидАналитики,
	|		МАКСИМУМ(Сбор.ИспользоватьДляДохода) КАК ИспользоватьДляДохода,
	|		МАКСИМУМ(Сбор.ИспользоватьДляРасхода) КАК ИспользоватьДляРасхода,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(Сбор.РедактироватьВШапкеПриоритет) = 1
	|				ТОГДА МАКСИМУМ(Сбор.РедактироватьВШапке1)
	|			КОГДА МАКСИМУМ(Сбор.РедактироватьВШапкеПриоритет) = 2
	|				ТОГДА МАКСИМУМ(Сбор.РедактироватьВШапке2)
	|			КОГДА МАКСИМУМ(Сбор.РедактироватьВШапкеПриоритет) = 3
	|				ТОГДА МАКСИМУМ(Сбор.РедактироватьВШапке3)
	|		КОНЕЦ КАК РедактироватьВШапке
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВидыАналитик.Ссылка КАК ВидАналитики,
	|			(ВидыАналитик.РасширенныеНастройкиДляДохода)
	|				И ВидыАналитик.АктуальнаДляДохода КАК ИспользоватьДляДохода,
	|			(ВидыАналитик.РасширенныеНастройкиДляРасхода)
	|				И ВидыАналитик.АктуальнаДляРасхода КАК ИспользоватьДляРасхода,
	|			1 КАК РедактироватьВШапкеПриоритет,
	|			ВЫБОР
	|				КОГДА &ИспользоватьДляДоходов
	|						И &ИспользоватьДляРасходов
	|					ТОГДА ВидыАналитик.РедактироватьВШапкеДляДохода
	|							И ВидыАналитик.РедактироватьВШапкеДляРасхода
	|				КОГДА &ИспользоватьДляДоходов
	|					ТОГДА ВидыАналитик.РедактироватьВШапкеДляДохода
	|				КОГДА &ИспользоватьДляРасходов
	|					ТОГДА ВидыАналитик.РедактироватьВШапкеДляРасхода
	|			КОНЕЦ КАК РедактироватьВШапке1,
	|			NULL КАК РедактироватьВШапке2,
	|			NULL КАК РедактироватьВШапке3
	|		ИЗ
	|			ПланВидовХарактеристик.ВидыАналитик КАК ВидыАналитик
	|		ГДЕ
	|			НЕ ВидыАналитик.ПометкаУдаления
	|			И (&ИспользоватьДляДоходов
	|						И ВидыАналитик.АктуальнаДляДохода
	|					ИЛИ &ИспользоватьДляРасходов
	|						И ВидыАналитик.АктуальнаДляРасхода)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НастройкиАналитики.ВидАналитики,
	|			&ИспользоватьДляДоходов
	|				И НастройкиАналитики.ВидАналитики.АктуальнаДляДохода,
	|			&ИспользоватьДляРасходов
	|				И НастройкиАналитики.ВидАналитики.АктуальнаДляРасхода,
	|			2,
	|			NULL,
	|			НастройкиАналитики.РедактироватьВШапке,
	|			NULL
	|		ИЗ
	|			РегистрСведений.НастройкиАналитикиВДокументахПоУмолчанию КАК НастройкиАналитики
	|		ГДЕ
	|			НастройкиАналитики.ВидДокумента = &ИмяВидаДокумента
	|			И &ПрименятьНастройкиАналитики
	|			И НЕ НастройкиАналитики.ВидАналитики.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОбщаяАналитикаДокумента.ВидАналитики,
	|			ОбщаяАналитикаДокумента.ИспользоватьДляДохода,
	|			ОбщаяАналитикаДокумента.ИспользоватьДляРасхода,
	|			3,
	|			NULL,
	|			NULL,
	|			ОбщаяАналитикаДокумента.РедактироватьВШапке
	|		ИЗ
	|			ОбщаяАналитикаДокумента КАК ОбщаяАналитикаДокумента
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыАналитикиИзДокумента.ВидАналитики,
	|			ПакетыАналитикиДокумента.ИспользоватьДляДохода,
	|			ПакетыАналитикиДокумента.ИспользоватьДляРасхода,
	|			3,
	|			NULL,
	|			NULL,
	|			ЛОЖЬ
	|		ИЗ
	|			ПакетыАналитикиДокумента КАК ПакетыАналитикиДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСубконтоАналитика.ВидыИЗначенияАналитики КАК ВидыАналитикиИзДокумента
	|				ПО ПакетыАналитикиДокумента.ПакетАналитики = ВидыАналитикиИзДокумента.Ссылка) КАК Сбор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сбор.ВидАналитики) КАК АктуальнаяАналитика
	|ГДЕ
	|	НЕ АктуальнаяАналитика.ВидАналитики ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктуальнаяАналитика.ВидАналитики.Наименование";
		
	ТаблицаАналитики = Запрос.Выполнить().Выгрузить();
	ТаблицаАналитики.Колонки.Добавить("ИДАналитики"); // идентификатор, из которого будут получаться имена реквизитов и элементов формы
	Возврат ТаблицаАналитики;
КонецФункции

#КонецОбласти